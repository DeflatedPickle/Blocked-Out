<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = 0.2
speed_hor = 0
speed_ver = 0
speed_jump = 6
speed_move = 4

friction = 0.4

image_xscale = 5
image_yscale = 5

// Global Variables
global.player = id
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*if global.is_rotating {
    exit
}*/

key_right = keyboard_check(ord("D"))
key_left = -keyboard_check(ord("A"))
key_jump = keyboard_check_pressed(vk_space)

move_dir = key_left + key_right
speed_hor = move_dir * speed_move

/*if key_right {
    // x += 5
    motion_set(0, speed_move)
}

if key_left {
    // x -= 5
    motion_set(-180, speed_move)
}*/

x = min(x, room_width - (sprite_width / 2))
x = max(x, 0 + (sprite_width / 2))

if speed_ver &lt; 10 {
    speed_ver += grav
}

if place_meeting(x, y + 1, obj_level) and key_jump {
    speed_ver = -speed_jump
}

// Horizontal Collision
if place_meeting(x + speed_hor, y, obj_level) {
    while not place_meeting(x + sign(speed_hor), y, obj_level) {
        x += sign(speed_hor)
    }
    speed_hor = 0
}
x += speed_hor
if place_meeting(x, y, obj_level) {
    x -= sign(speed_hor)
}

// Vetical Collision
if place_meeting(x, y + speed_ver, obj_level) {
    while not place_meeting(x, y + sign(speed_ver), obj_level) {
        y += sign(speed_ver)
    }
    speed_ver = 0
}
y += speed_ver
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
